{"version":3,"sources":["queryBdd.js"],"names":["connection2","require","module","exports","userCreate","insert","query","userEmailUnique","insertEMail","userLogin","userProfil","userProfilUpdate","userProfilPhoto","userCommentDelete","userMessageDelete","userDelete","discussionCreate","discussionSelectAll","discussionSelectOne","discussionDelete","insertId","messageCreate","messageSelectAll","fileDelete","UserDeleteFile","messageUserIdBeforeDelete","insertMessageId","messageDelete","commentDeleteMessageId","commentDeleteCommentId","insertCommentId","fileFind","messageCommentCreate","commentSelectAll","commentSelectUserIdBeforeDelete","messageLike","insertFirst","messageNbLike","insert2","messageUserLike","messageUserDislike","insertForDelete","messageDeleteLike","messageLikeDeleteProfil","selectMessageForDiscussionDelete","discussionDeleteMessage","discussionDeleteLikeMessage","fileMessageDeleteUser","selectIdFromUser","getUserById","userId"],"mappings":"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","sourcesContent":["\nconst connection2 = require('./connexionDatabase2');\n\nmodule.exports = {\n    //création d'un user\n    userCreate: function(insert) {\n        return connection2.query('INSERT INTO User(name, firstName, email, password, photo) VALUES (?,?,?,?,?)', insert);\n    },\n\n    //vérification email unique\n    userEmailUnique: function(insertEMail) {\n        return connection2.query('SELECT email FROM User WHERE email = ?', insertEMail);\n    },\n\n    //récupération d'un utilisateur pour le login\n    userLogin: function(insert) {\n        return connection2.query('SELECT * FROM User WHERE email = ? ', insert);\n    },\n\n    //récupération d'un utilisateur pour le profil\n    userProfil: function(insert) {\n        return connection2.query('SELECT name, firstName, photo FROM User WHERE id=?', insert);\n    },\n\n    //mise à jour de la photo de profil\n    userProfilUpdate: function(insert) {\n        return connection2.query('UPDATE User SET photo=? WHERE id=?', insert);\n    },\n\n    //récupération de la photo de profil\n    userProfilPhoto: function(insert) {\n        return connection2.query('SELECT photo FROM User WHERE id = ?', insert);\n    },\n\n    //supprime les commentaires liés à un utilisateur\n    userCommentDelete:function() {\n        return 'DELETE FROM Comment WHERE user_id = ?'\n    },\n\n    //supprime les messages liés à un utilisateur\n    userMessageDelete:function() {\n        return 'DELETE FROM Message WHERE user_id = ?'\n    },\n\n    //supprime l'utilisateur\n    userDelete:function(insert) {\n        return connection2.query('DELETE FROM User WHERE id=?', insert);\n    },\n\n    //creation de la discussion\n    discussionCreate: function(insert) {\n        return connection2.query('INSERT INTO Discussion(user_id,title) VALUES (?,?)', insert);\n    },\n\n    // récupération de toutes les discussions\n    discussionSelectAll: function() {\n        return connection2.query('SELECT title,id FROM Discussion');\n    },\n\n    // récupération d'une discussion\n    discussionSelectOne: function(insert) {\n        return connection2.query('SELECT title FROM Discussion WHERE id=?', insert);\n    },\n\n    // supression d'une discussion\n    discussionDelete: function(insertId) {\n        return connection2.query('DELETE FROM Discussion WHERE id=?', insertId);\n    },\n\n    //création d'un message\n    messageCreate: function(insert) {\n        return connection2.query('INSERT INTO Message(user_id,discussion_id,text_message,date,file) VALUES (?,?,?,?,?)', insert);\n    },\n\n    //récupération de tous les messages\n    messageSelectAll: function(insert) {\n        return connection2.query('SELECT Message.text_message, User.name, User.firstName, User.photo, Discussion.title, Discussion.id, Message.date, Message.id, Message.file FROM Message INNER JOIN Discussion ON Message.discussion_id = Discussion.id INNER JOIN User ON Message.user_id = User.id WHERE Discussion.id = ? ORDER BY Message.date DESC', insert);\n    },\n\n    //supression d'un fichier à partir de l'id du message\n    fileDelete: function(insert) {\n        return connection2.query('SELECT file FROM Message WHERE id=?', insert);\n    },\n\n    //supression d'un fichier à partir de l'id du message\n    UserDeleteFile: function() {\n        return 'SELECT file FROM Message WHERE user_id=?'\n    },\n\n    //Vérification du userId avant de supprimer un message\n    messageUserIdBeforeDelete: function(insertMessageId) {\n        return connection2.query('SELECT user_id FROM Message WHERE id=?', insertMessageId);\n    },\n\n    //Supression d'un message\n    messageDelete: function(insertMessageId) {\n        return connection2.query('DELETE FROM Message WHERE id=?', insertMessageId);\n    },\n\n    //suppression d'un commentaire a partir du message_id\n    commentDeleteMessageId: function(insert) {\n        return connection2.query('DELETE FROM Comment WHERE message_id=?', insert);\n    },\n\n    //suppression d'un commentaire à partir de l'id du commentaire\n    commentDeleteCommentId: function(insertCommentId) {\n        return connection2.query('DELETE FROM Comment WHERE id=?', insertCommentId);\n    },\n\n    //récupération d'un fichier\n    fileFind: function(insert) {\n        return connection2.query('SELECT file FROM Message WHERE id = ?', insert);\n    },\n\n    //création d'un commentaire sur un message\n    messageCommentCreate: function(insert) {\n        return connection2.query('INSERT INTO Comment(user_id,message_id,text_comment,date_comment) VALUES (?,?,?,?)', insert)\n    },\n\n    //récupération des commentaires pour un message\n    commentSelectAll: function(insert) {\n        return connection2.query('SELECT Comment.text_comment, User.name, User.firstName, Comment.date_comment, Comment.message_id, Comment.id, User.photo FROM Comment INNER JOIN Message ON Comment.message_id = Message.id INNER JOIN User ON Comment.user_id = User.id WHERE Message.id = ? ORDER BY Comment.date_comment ASC', insert)\n    },\n\n    //Vérification de l'utilisateur avant la suppression d'un message\n    commentSelectUserIdBeforeDelete: function(insertCommentId) {\n        return connection2.query('SELECT user_id FROM Comment WHERE id=?', insertCommentId); \n    },\n\n    //insertion d'un utilisateur qui aime un message\n    messageLike: function(insertFirst) {\n        return connection2.query('INSERT INTO Liked(user_id, message_id, liked_date) VALUES(?, ?, ?)', insertFirst);\n    },\n\n    //Compte le nombre d elike pour un message\n    messageNbLike: function(insert2) {\n        return connection2.query('SELECT COUNT(*) AS nb_like FROM Liked WHERE message_id = ?', insert2);\n    },\n\n    //Selectionne l'id de l'utilisateur qui aime un message\n    messageUserLike: function(insertMessageId) {\n        return connection2.query('SELECT * FROM Liked WHERE Liked.user_id = ? AND Liked.message_id = ?',insertMessageId);\n    },\n\n    messageUserDislike:function(insertForDelete) {\n        return connection2.query('DELETE FROM Liked WHERE user_id=? AND message_id= ?', insertForDelete);\n    },\n\n    //Supression des likes pour un message_id\n    messageDeleteLike: function(insertMessageId) {\n        return connection2.query('DELETE FROM Liked WHERE message_id=?', insertMessageId);\n    },\n\n    //Suppression des likes lors de la supression du profil\n    messageLikeDeleteProfil: function() {\n        return 'DELETE FROM Liked WHERE  user_id = ?'\n    },\n\n    //Sélection des id de messages en fonction de la discussion\n    selectMessageForDiscussionDelete: function(insertId) {\n        return connection2.query('SELECT id FROM Message WHERE discussion_id = ?', insertId);\n    },\n\n    discussionDeleteMessage: function(insertId) {\n        return connection2.query('DELETE FROM Message WHERE discussion_id = ?', insertId);\n    },\n\n    discussionDeleteLikeMessage:function (insert) {\n        return connection2.query('DELETE FROM Liked WHERE message_id= ?', insert);\n    },\n\n    fileMessageDeleteUser: function (insert) {\n        return connection2.query('SELECT file FROM Message WHERE user_id = ?', insert);\n    },\n\n    selectIdFromUser: function(insert) {\n        return connection2.query('SELECT id FROM User WHERE id=?', insert);\n    },\n\n    getUserById: function(userId) {\n        return connection2.query('SELECT * FROM User WHERE id=?', userId);\n    }\n}\n"],"file":"queryBdd.dev.js"}