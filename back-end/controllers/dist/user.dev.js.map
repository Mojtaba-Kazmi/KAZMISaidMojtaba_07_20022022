{"version":3,"sources":["user.js"],"names":["fs","require","bcrypt","jwt","queryDbb","emailRegex","passwordRegex","exports","signup","req","res","next","name","body","firstName","email","password","photo","file","protocol","get","filename","test","status","json","insertEMail","userEmailUnique","resultUser","length","hash","then","insert","userCreate","resultInsert","error","login","userLogin","result","passwordBase","toString","compare","resultTest","userId","id","token","sign","isAdmin","expiresIn","err","console","log","getProfil","user","userProfil","updateProfil","imageUrl","insertId","userProfilPhoto","resultPhoto","split","unlinkSync","userProfilUpdate","message","deleteProfil","fileMessageDeleteUser","resultFile","userDelete"],"mappings":"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","sourcesContent":["//Imports\nconst fs = require('fs');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst queryDbb = require('../queryBdd');\n\n//Constant\nconst emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\nconst passwordRegex = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{4,8}$/\n\n//Controlers\n\n//sauvegarde un nouvel utilisateur, hash le mot de passe\nexports.signup = async (req, res, next) =>  {\n    const name = req.body.name;\n    const firstName = req.body.firstName;\n    const email = req.body.email;\n    let password = req.body.password;\n    let photo = null\n\n    //On vérifie si un fichier a été envoyé\n    if (req.file) {\n        photo = `${req.protocol}://${req.get('host')}/images/${req.file.filename}`\n    }\n    \n    //on vérifie si l'email est correct\n    if (!emailRegex.test(email)) {\n        return res.status(400).json({'error': 'l\\'email n\\'est pas valide'})\n    }\n\n    //on vérifie si le mot de passe correspond aux critères\n    if(!passwordRegex.test(password)) {\n        return res.status(400).json({'error': 'mot de passe non valide : il doit contenir entre 4 et 8 caractères, 1 majuscule, 1 minuscule et 1 chiffre'})\n    }\n\n    //on vérifie si les champs ne sont pas vides\n    if (name == null || firstName == null || email == null || password == null) {\n        return res.status(400).json({'error' : 'items manquants'});\n    }\n    \n    const insertEMail = [email];\n    \n    const resultUser = await queryDbb.userEmailUnique(insertEMail);\n    \n    try {\n        if(resultUser.length>0) {\n            if (resultUser[0].email == email) {\n                return res.status(400).json({'error': 'l\\'email est déjà utilisé !'})\n            }\n        } else {\n            // hachage du mot de passe, salage par 10\n            bcrypt.hash(password, 10)\n            .then(async (hash) => {\n                password = hash;\n                const insert = [name, firstName, email, password, photo];\n\n                let resultInsert = await queryDbb.userCreate(insert);\n                return res.status(200).json(resultInsert);\n                \n            })\n            .catch(error => res.status(500).json({ error }));\n        }\n    } catch (err) {\n        return res.status(500).json({error: \"mysql2\"}); \n    }\n    \n};\n\n//vérifie si l'utilisateur existe, si oui, on vérifie le mot de passe. Si celui ci est correct, on renvoie un tokenn contenant l'ID de l'utilisateur\n//sinon on renvoie une erreur\nexports.login = async (req, res, next) => {\n    const email = req.body.email;\n    const password = req.body.password;\n    const insert = [email];\n\n    let result = await queryDbb.userLogin(insert);\n    try {\n        if (result[0]) {\n            const passwordBase = result[0].password.toString('utf-8');\n            bcrypt.compare(password, passwordBase)\n            .then(resultTest => {\n                if (resultTest == false) {\n                    return res.status(401).json({ error: 'Mot de passe incorrect !' });\n                } else {\n                    return res.status(200).json({\n                        userId: result[0].id,\n                        token: jwt.sign(\n                        { userId: result[0].id,\n                            isAdmin: result[0].isAdmin  },\n                        'RANDOM_TOKEN_SECRET',\n                        { expiresIn: '1h' }\n                        )\n                    });\n                }\n            }).catch(err => {\n                console.log(err)\n            })\n        } else {\n            return res.status(401).json({error: 'Utilisateur non trouvé !'});\n        }\n    } catch (err) {\n        return res.status(500).json({error: \"mysql2\"});\n    }\n};  \n\n//récupération du profil\nexports.getProfil = async (req, res, next) => {\n    const userId = req.user;\n    const insert = [userId];\n\n    let result = await queryDbb.userProfil(insert);\n    try {\n        if (!result[0]) {\n            return res.status(400).json({error: 'l\\'id ne correspond pas'});\n        } else {\n            return res.status(200).json(result[0]);\n        }\n    } catch (err) {\n        return res.status(500).json({error: \"mysql2\"});\n    }\n}\n\n//mise à jour de la photo de profil\nexports.updateProfil = async (req, res, next) => {\n    const userId = req.user;\n    const imageUrl = `${req.protocol}://${req.get('host')}/images/${req.file.filename}`;\n    const insert = [imageUrl,userId];\n    const insertId = [userId];\n\n    const resultPhoto = await queryDbb.userProfilPhoto(insertId);\n    if (resultPhoto[0].photo !== null) {\n        //si il y a une photo de profil\n        //on récupère le nom du filename\n        const filename = resultPhoto[0].photo.split('/images/')[1]; \n        //on supprime le fichier du dossier images\n        fs.unlinkSync(`./images/${filename}`);\n    }\n\n    await queryDbb.userProfilUpdate(insert);\n    try {\n        return res.status(200).json({message:'photo mise à jour'});\n    } catch (err) {\n        return res.status(500).json({error: \"mysql2\"});\n    }\n}\n\n//suppression du profil\nexports.deleteProfil = async (req, res, next) => {\n    const userId = req.user;\n    const insert = [userId]\n\n    //on vérifie si il y a une photo de profil\n    let resultPhoto = await queryDbb.userProfilPhoto(insert);\n    if (resultPhoto[0].photo !== null) {\n        //si il y a une photo de profil\n        //on récupère le nom du filename\n        const filename = resultPhoto[0].photo.split('/images/')[1]; \n        //on supprime le fichier du dossier images\n        fs.unlinkSync(`./images/${filename}`);\n    }\n\n    //on vérifie si il y a des photos dans les messages de l'utilisateur\n    const resultFile = await queryDbb.fileMessageDeleteUser(insert);\n    console.log(resultFile)\n    console.log(resultFile.length)\n    if (resultFile.length > 0) {\n        //si il y a des fichiers on les supprime\n        //on récupère le nom du filename\n        const filename = resultFile[0].file.split('/images/')[1]; \n        //on supprime le fichier du dossier images\n        fs.unlinkSync(`./images/${filename}`); \n    } \n\n    try {\n    //on supprime l'utilisateur\n    await queryDbb.userDelete(insert);\n    return res.status(200).json('Profil supprimé');\n    } catch (err) {\n    return res.status(500).json({error: \"mysql2\"});\n    }\n}"],"file":"user.dev.js"}