{"version":3,"sources":["user.js"],"names":["fs","require","bcrypt","jwt","queryDbb","passwordRegex","exports","req","res","name","firstName","email","password","photo","insertEMail","resultUser","regeneratorRuntime","async","_context2","prev","next","body","signup","file","get","filename","test","abrupt","status","json","error","awrap","userEmailUnique","sent","length","hash","then","insert","resultInsert","_context","userCreate","stop","t0","login","result","passwordBase","_context3","userLogin","toString","compare","resultTest","userId","id","token","sign","isAdmin","expiresIn","err","console","log","getProfil","_context4","user","userProfil","updateProfil","imageUrl","insertId","resultPhoto","_context5","concat","protocol","userProfilPhoto","split","unlinkSync","userProfilUpdate","message","fileMessageDeleteUser","resultFile","userDelete"],"mappings":"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","file":"user.min.js","sourcesContent":["//Imports\nconst fs = require('fs');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst queryDbb = require('../queryBdd');\n\n//Constant\nconst emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\nconst passwordRegex = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{4,8}$/\n\n//Controlers\n\n//sauvegarde un nouvel utilisateur, hash le mot de passe\nexports.signup = async (req, res, next) =>  {\n    const name = req.body.name;\n    const firstName = req.body.firstName;\n    const email = req.body.email;\n    let password = req.body.password;\n    let photo = null\n\n    //On vérifie si un fichier a été envoyé\n    if (req.file) {\n        photo = `${req.protocol}://${req.get('host')}/images/${req.file.filename}`\n    }\n    \n    //on vérifie si l'email est correct\n    if (!emailRegex.test(email)) {\n        return res.status(400).json({'error': 'l\\'email n\\'est pas valide'})\n    }\n\n    //on vérifie si le mot de passe correspond aux critères\n    if(!passwordRegex.test(password)) {\n        return res.status(400).json({'error': 'mot de passe non valide : il doit contenir entre 4 et 8 caractères, 1 majuscule, 1 minuscule et 1 chiffre'})\n    }\n\n    //on vérifie si les champs ne sont pas vides\n    if (name == null || firstName == null || email == null || password == null) {\n        return res.status(400).json({'error' : 'items manquants'});\n    }\n    \n    const insertEMail = [email];\n    \n    const resultUser = await queryDbb.userEmailUnique(insertEMail);\n    \n    try {\n        if(resultUser.length>0) {\n            if (resultUser[0].email == email) {\n                return res.status(400).json({'error': 'l\\'email est déjà utilisé !'})\n            }\n        } else {\n            // hachage du mot de passe, salage par 10\n            bcrypt.hash(password, 10)\n            .then(async (hash) => {\n                password = hash;\n                const insert = [name, firstName, email, password, photo];\n\n                let resultInsert = await queryDbb.userCreate(insert);\n                return res.status(200).json(resultInsert);\n                \n            })\n            .catch(error => res.status(500).json({ error }));\n        }\n    } catch (err) {\n        return res.status(500).json({error: \"mysql2\"}); \n    }\n    \n};\n\n//vérifie si l'utilisateur existe, si oui, on vérifie le mot de passe. Si celui ci est correct, on renvoie un tokenn contenant l'ID de l'utilisateur\n//sinon on renvoie une erreur\nexports.login = async (req, res, next) => {\n    const email = req.body.email;\n    const password = req.body.password;\n    const insert = [email];\n\n    let result = await queryDbb.userLogin(insert);\n    try {\n        if (result[0]) {\n            const passwordBase = result[0].password.toString('utf-8');\n            bcrypt.compare(password, passwordBase)\n            .then(resultTest => {\n                if (resultTest == false) {\n                    return res.status(401).json({ error: 'Mot de passe incorrect !' });\n                } else {\n                    return res.status(200).json({\n                        userId: result[0].id,\n                        token: jwt.sign(\n                        { userId: result[0].id,\n                            isAdmin: result[0].isAdmin  },\n                        'RANDOM_TOKEN_SECRET',\n                        { expiresIn: '1h' }\n                        )\n                    });\n                }\n            }).catch(err => {\n                console.log(err)\n            })\n        } else {\n            return res.status(401).json({error: 'Utilisateur non trouvé !'});\n        }\n    } catch (err) {\n        return res.status(500).json({error: \"mysql2\"});\n    }\n};  \n\n//récupération du profil\nexports.getProfil = async (req, res, next) => {\n    const userId = req.user;\n    const insert = [userId];\n\n    let result = await queryDbb.userProfil(insert);\n    try {\n        if (!result[0]) {\n            return res.status(400).json({error: 'l\\'id ne correspond pas'});\n        } else {\n            return res.status(200).json(result[0]);\n        }\n    } catch (err) {\n        return res.status(500).json({error: \"mysql2\"});\n    }\n}\n\n//mise à jour de la photo de profil\nexports.updateProfil = async (req, res, next) => {\n    const userId = req.user;\n    const imageUrl = `${req.protocol}://${req.get('host')}/images/${req.file.filename}`;\n    const insert = [imageUrl,userId];\n    const insertId = [userId];\n\n    const resultPhoto = await queryDbb.userProfilPhoto(insertId);\n    if (resultPhoto[0].photo !== null) {\n        //si il y a une photo de profil\n        //on récupère le nom du filename\n        const filename = resultPhoto[0].photo.split('/images/')[1]; \n        //on supprime le fichier du dossier images\n        fs.unlinkSync(`./images/${filename}`);\n    }\n\n    await queryDbb.userProfilUpdate(insert);\n    try {\n        return res.status(200).json({message:'photo mise à jour'});\n    } catch (err) {\n        return res.status(500).json({error: \"mysql2\"});\n    }\n}\n\n//suppression du profil\nexports.deleteProfil = async (req, res, next) => {\n    const userId = req.user;\n    const insert = [userId]\n\n    //on vérifie si il y a une photo de profil\n    let resultPhoto = await queryDbb.userProfilPhoto(insert);\n    if (resultPhoto[0].photo !== null) {\n        //si il y a une photo de profil\n        //on récupère le nom du filename\n        const filename = resultPhoto[0].photo.split('/images/')[1]; \n        //on supprime le fichier du dossier images\n        fs.unlinkSync(`./images/${filename}`);\n    }\n\n    //on vérifie si il y a des photos dans les messages de l'utilisateur\n    const resultFile = await queryDbb.fileMessageDeleteUser(insert);\n    console.log(resultFile)\n    console.log(resultFile.length)\n    if (resultFile.length > 0) {\n        //si il y a des fichiers on les supprime\n        //on récupère le nom du filename\n        const filename = resultFile[0].file.split('/images/')[1]; \n        //on supprime le fichier du dossier images\n        fs.unlinkSync(`./images/${filename}`); \n    } \n\n    try {\n    //on supprime l'utilisateur\n    await queryDbb.userDelete(insert);\n    return res.status(200).json('Profil supprimé');\n    } catch (err) {\n    return res.status(500).json({error: \"mysql2\"});\n    }\n}"]}