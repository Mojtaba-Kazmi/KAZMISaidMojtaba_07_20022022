{"version":3,"sources":["user.js"],"names":["fs","require","bcrypt","jwt","queryDbb","config","passwordRegex","exports","signup","req","res","name","firstName","email","password","photo","insertEMail","resultUser","regeneratorRuntime","async","_context2","prev","next","emailRegex","body","file","concat","protocol","get","filename","abrupt","status","test","json","error","awrap","userEmailUnique","sent","hash","then","insert","resultInsert","_context","userCreate","stop","t0","userLogin","result","toString","compare","passwordBase","resultTest","userId","id","token","sign","isAdmin","expiresIn","err","console","log","getProfil","_context4","user","userProfil","updateProfil","imageUrl","insertId","resultPhoto","_context5","userProfilPhoto","split","unlinkSync","userProfilUpdate","message","resultFile","length"],"mappings":"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","file":"user.min.js","sourcesContent":["//Imports\nconst fs = require('fs');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst queryDbb = require('../queryBdd');\nconst cryptoJS = require(\"crypto-js\");\nrequire('dotenv').config();\n\n//Constant\nconst emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\nconst passwordRegex = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{4,8}$/\n\n//Controlers\n\n//sauvegarde un nouvel utilisateur, hash le mot de passe\nexports.signup = async (req, res, next) =>  {\n    const name = req.body.name;\n    const firstName = req.body.firstName;\n    const email = req.body.email;\n    let password = req.body.password;\n    let photo = null\n\n    //On vérifie si un fichier a été envoyé\n    if (req.file) {\n        photo = `${req.protocol}://${req.get('host')}/images/${req.file.filename}`\n    }\n    \n    //on vérifie si l'email est correct\n    if (!emailRegex.test(email)) {\n        return res.status(400).json({'error': 'l\\'email n\\'est pas valide'})\n    }\n\n    //on vérifie si le mot de passe correspond aux critères\n    if(!passwordRegex.test(password)) {\n        return res.status(400).json({'error': 'mot de passe non valide : il doit contenir entre 4 et 8 caractères, 1 majuscule, 1 minuscule et 1 chiffre'})\n    }\n\n    //on vérifie si les champs ne sont pas vides\n    if (name == null || firstName == null || email== null || password == null) {\n        return res.status(400).json({'error' : 'items manquants'});\n    }\n    \n    const insertEMail = [email];\n    \n    const resultUser = await queryDbb.userEmailUnique(insertEMail);\n    \n    try {\n        if(resultUser.length>0) {\n            if (resultUser[0].email == email) {\n                return res.status(400).json({'error': 'l\\'email est déjà utilisé !'})\n            }\n        } else {\n            // hachage du mot de passe, salage par 10\n            bcrypt.hash(password, 10)\n            .then(async (hash) => {\n                password = hash;\n                const insert = [name, firstName, email, password, photo];\n\n                let resultInsert = await queryDbb.userCreate(insert);\n                return res.status(200).json(resultInsert);\n                \n            })\n            .catch(error => res.status(500).json({ error }));\n        }\n    } catch (err) {\n        return res.status(500).json({error: \"mysql2\"}); \n    }\n    \n};\n\n//vérifie si l'utilisateur existe, si oui, on vérifie le mot de passe. Si celui ci est correct, on renvoie un tokenn contenant l'ID de l'utilisateur\n//sinon on renvoie une erreur\nexports.login = async (req, res, next) => {\n    const email = req.body.email;\n    const password = req.body.password;\n    const insert = [email];\n\n    let result = await queryDbb.userLogin(insert);\n    try {\n        if (result[0]) {\n            const passwordBase = result[0].password.toString('utf-8');\n            bcrypt.compare(password, passwordBase)\n            .then(resultTest => {\n                if (resultTest == false) {\n                    return res.status(401).json({ error: 'Mot de passe incorrect !' });\n                } else {\n                    return res.status(200).json({\n                        userId: result[0].id,\n                        token: jwt.sign(\n                        { userId: result[0].id,\n                            isAdmin: result[0].isAdmin  },\n                        'RANDOM_TOKEN_SECRET',\n                        { expiresIn: '24h' }\n                        )\n                    });\n                }\n            }).catch(err => {\n                console.log(err)\n            })\n        } else {\n            return res.status(401).json({error: 'Utilisateur non trouvé !'});\n        }\n    } catch (err) {\n        return res.status(500).json({error: \"mysql2\"});\n    }\n};  \n\n//récupération du profil\nexports.getProfil = async (req, res, next) => {\n    const userId = req.user;\n    const insert = [userId];\n\n    let result = await queryDbb.userProfil(insert);\n    try {\n        if (!result[0]) {\n            return res.status(400).json({error: 'l\\'id ne correspond pas'});\n        } else {\n            return res.status(200).json(result[0]);\n        }\n    } catch (err) {\n        return res.status(500).json({error: \"mysql2\"});\n    }\n}\n\n//mise à jour de la photo de profil\nexports.updateProfil = async (req, res, next) => {\n    const userId = req.user;\n    const imageUrl = `${req.protocol}://${req.get('host')}/images/${req.file.filename}`;\n    const insert = [imageUrl,userId];\n    const insertId = [userId];\n\n    const resultPhoto = await queryDbb.userProfilPhoto(insertId);\n    if (resultPhoto[0].photo !== null) {\n        //si il y a une photo de profil\n        //on récupère le nom du filename\n        const filename = resultPhoto[0].photo.split('/images/')[1]; \n        //on supprime le fichier du dossier images\n        fs.unlinkSync(`./images/${filename}`);\n    }\n\n    await queryDbb.userProfilUpdate(insert);\n    try {\n        return res.status(200).json({message:'photo mise à jour'});\n    } catch (err) {\n        return res.status(500).json({error: \"mysql2\"});\n    }\n}\n\n//suppression du profil\nexports.deleteProfil = async (req, res, next) => {\n    const userId = req.user;\n    const insert = [userId]\n\n    //on vérifie si il y a une photo de profil\n    let resultPhoto = await queryDbb.userProfilPhoto(insert);\n    if (resultPhoto[0].photo !== null) {\n        //si il y a une photo de profil\n        //on récupère le nom du filename\n        const filename = resultPhoto[0].photo.split('/images/')[1]; \n        //on supprime le fichier du dossier images\n        fs.unlinkSync(`./images/${filename}`);\n    }\n\n    //on vérifie si il y a des photos dans les messages de l'utilisateur\n    const resultFile = await queryDbb.fileMessageDeleteUser(insert);\n    console.log(resultFile)\n    console.log(resultFile.length)\n    if (resultFile.length > 0) {\n        //si il y a des fichiers on les supprime\n        //on récupère le nom du filename\n        const filename = resultFile[0].file.split('/images/')[1]; \n        //on supprime le fichier du dossier images\n        fs.unlinkSync(`./images/${filename}`); \n    } \n\n    try {\n    //on supprime l'utilisateur\n    await queryDbb.userDelete(insert);\n    return res.status(200).json('Profil supprimé');\n    } catch (err) {\n    return res.status(500).json({error: \"mysql2\"});\n    }\n}"]}