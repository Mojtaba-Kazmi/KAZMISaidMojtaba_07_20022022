{"version":3,"sources":["discussion.js"],"names":["fs","require","queryDbb","exports","req","res","userId","title","insert","result","regeneratorRuntime","async","_context","prev","next","user","body","createDiscussion","awrap","discussionCreate","sent","abrupt","status","json","t0","error","stop","getAllDiscussion","_context2","discussionSelectAll","getOneDiscussion","id","_context3","params","discussionSelectOne","deleteDiscussion","isAdmin","insertId","messageIds","i","queryStringFindFile","filename","_context4","userIsAdmin","selectMessageForDiscussionDelete","length","fileFind","file","commentDeleteMessageId","discussionDeleteLikeMessage","discussionDeleteMessage","discussionDelete","createMessage","message","discussionId","date","_context5","text_message","Date","concat","protocol","get","messageCreate","getAllMessage","insert2","nb_like","_context6","messageSelectAll","messageNbLike","nbLike","deleteMessage","messageId","insertMessageId","messageUserIdBeforeDelete","messageDeleteLike","queryStringFile","split","unlinkSync","messageDelete","likeMessage","insertFirst","insertForDelete","resultUser","_context8","message_id","messageUserLike","user_id","messageUserDislike","messageLike","commentMessage","comment","_context9","text_comment","messageCommentCreate","getComment","commentSelectAll","deleteComment","commentId","insertCommentId","_context11","commentSelectUserIdBeforeDelete","commentDeleteCommentId"],"mappings":"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","file":"discussion.min.js","sourcesContent":["const fs = require('fs');\nconst queryDbb = require('../queryBdd');\n\n//Création d'une discussion\nexports.createDiscussion = async (req, res, next) => {\n  const userId = req.user;\n  const title = req.body.title;\n  const insert = [userId, title];\n\n  const result = await queryDbb.discussionCreate(insert);\n  try {\n    return res.status(200).json(result);\n  } catch (err) {\n    return res.status(500).json({ error: \"mysql\" });\n  }\n};\n\n//récupération de toutes les discussion\nexports.getAllDiscussion = async (req, res, next) => {\n\n  const result = await queryDbb.discussionSelectAll();\n  try {\n    return res.status(200).json(result);\n  } catch (err) {\n    return res.status(500).json({ error: \"mysql\" });\n  }\n};\n\n//récupération d'une discussion par son id\nexports.getOneDiscussion = async (req, res, next) => {\n  const id = req.params.id;\n  const insert = [id];\n\n  const result = await queryDbb.discussionSelectOne(insert);\n  try {\n    return res.status(200).json(result);\n  } catch (err) {\n    return res.status(500).json({ error: \"mysql\" });\n  }\n};\n\n//suppression d'une discussion \nexports.deleteDiscussion = async (req, res, next) => {\n  const id = req.params.id;\n  const isAdmin = req.userIsAdmin;\n  const insertId = [id]\n\n  if (isAdmin == 1) {\n    //je récupère tous les id des messages de la discussion\n    const messageIds = await queryDbb.selectMessageForDiscussionDelete(insertId);\n\n    for (let i = 0; i < messageIds.length; i++) {\n      const insert = [messageIds[i].id];\n\n      let queryStringFindFile = await queryDbb.fileFind(insert);\n\n      if (queryStringFindFile[0].file !== null) {\n        const filename = queryStringFindFile[0].file.split('/images/')[1];\n        fs.unlinkSync(`./images/${filename}`);\n      }\n\n      try {\n        await queryDbb.commentDeleteMessageId(insert);\n        await queryDbb.discussionDeleteLikeMessage(insert);\n        await queryDbb.discussionDeleteMessage(insertId);\n        await queryDbb.discussionDelete(insertId);\n      } catch ( err ) {\n        return res.status(500).json({ error: \"mysql\" });\n      }\n    }\n\n    return res.status(200).json(\"Discussion supprimée\");\n\n  } else {\n    //Si l'utilisateur n'est pas admin\n    return res.status(400).json({error: \"Vous n'êtes pas autorisé à supprimer cette discussion\"});\n  }\n};\n\n//création d'un message\nexports.createMessage = async (req, res, next) => {\n  const userId = req.user;\n  const message = req.body.text_message;\n  const discussionId = req.body.discussionId;\n  const date = new Date();\n  \n  let file = null\n\n  if (req.file) {\n      file = `${req.protocol}://${req.get('host')}/images/${req.file.filename}`\n  }\n\n  const insert = [userId, discussionId, message, date, file];\n\n  const result = await queryDbb.messageCreate(insert);\n  try {\n    return res.status(200).json(result);\n  } catch (err) {\n    return res.status(500).json({ error: \"mysql\" });\n  }\n};\n\n//récupération de tous les messages\nexports.getAllMessage = async (req, res, next) => {\n  const discussionId = req.params.id;\n  const insert = [discussionId];\n\n  const result = await queryDbb.messageSelectAll(insert);\n  \n    for (let i=0; i < result.length; i++) {\n      let insert2 = [result[i].id];\n      const nb_like = await queryDbb.messageNbLike(insert2);\n\n      try {\n        result[i].nbLike = nb_like[0].nb_like;\n      } catch (err) {\n        return res.status(500).json({ error: error });\n      }\n    } \n    return res.status(200).json(result);\n    \n  \n};\n\n//suppression d'un message \nexports.deleteMessage = async (req, res, next) => {\n  const userId = req.user;\n  const messageId = req.body.id;\n  const isAdmin = req.userIsAdmin;\n  const insertMessageId = [messageId];\n\n  //1 On vérifie que l'utilisateur correspond à l'utilisateur qui a posté le message ou qu'il est admin\n  const result = await queryDbb.messageUserIdBeforeDelete(insertMessageId);\n  \n  \n  try {\n    //Si l'utilisateur n'est pas celui qui a posté le message, on renvoie une erreur pour lui dire qu'il ne peut pas supprimer le message\n    if (result[0].user_id != userId && isAdmin == 0) {\n      return res.status(400).json({message: \"Vous ne pouvez pas supprimer ce message !\"});\n    }\n\n    await queryDbb.commentDeleteMessageId(insertMessageId);\n    await queryDbb.messageDeleteLike(insertMessageId);\n\n    const queryStringFile = await queryDbb.fileFind(insertMessageId);\n    if (queryStringFile[0].file !== null) {\n      const filename = queryStringFile[0].file.split('/images/')[1];\n      fs.unlinkSync(`./images/${filename}`);              \n    }\n    \n    await queryDbb.messageDelete(insertMessageId);\n\n    return res.status(200).json({\"message\": \"Message supprimé\"});\n  } catch (err) {\n    return res.status(500).json({ error: \"mysql\" });\n  }\n    \n};\n\n//Insertion d'un like\nexports.likeMessage = async (req, res, next) => {\n  const userId = req.user\n  const messageId = req.body.message_id;\n  const date = new Date();\n  const insertFirst = [userId, messageId, date];\n  const insertMessageId = [messageId];\n  const insertForDelete = [userId, messageId];\n\n  const resultUser = await queryDbb.messageUserLike(insertMessageId);\n  //on va vérifier si l'utilisateur a déjà aimé le message\n  try {\n      //Si l'utilisateur a déjà aimé le like, on le supprime de la base\n      if (resultUser.length > 0 && resultUser[0].user_id == userId) {\n        await queryDbb.messageUserDislike(insertForDelete);\n        return res.status(200).json({message: \"Like supprimé de la base\"});\n      } else {\n        //si non on l'ajoute à la base\n        const result = await queryDbb.messageLike(insertFirst);\n        return res.status(200).json(result);\n      }\n  } catch ( err ) {\n    return res.status(500).json({ error: \"mysql\" });\n  }\n}\n\n\n//création d'un commentaire\nexports.commentMessage = async (req, res, next) => {\n  const userId = req.user\n  const messageId = req.body.message_id;\n  const comment = req.body.text_comment;\n  const date = new Date();\n  const insert = [userId, messageId, comment, date]\n\n  const result = await queryDbb.messageCommentCreate(insert);\n  try {\n    return res.status(200).json(result);\n  } catch (err) {\n    return res.status(500).json({ error: \"mysql\" });\n  }\n};\n\n//récupérations des commentaires\nexports.getComment = async (req, res, next) => {\n  const userId = req.user\n  const messageId = req.params.id;\n  const insert = [messageId];\n\n  const result = await queryDbb.commentSelectAll(insert);\n  try {\n    return res.status(200).json(result);\n  } catch (err) {\n    return res.status(500).json({ error: \"mysql\" });\n  }\n};\n\n//suppression d'un commentaire \nexports.deleteComment = async (req, res, next) => {\n  const userId = req.user\n  const commentId = req.body.id;\n  const isAdmin = req.userIsAdmin;\n  const insertCommentId = [commentId];\n  \n  const result = await queryDbb.commentSelectUserIdBeforeDelete(insertCommentId);\n  // On vérifie que l'utilisateur est celui qui a posté le commentaire ou qu'il est admin\n  if (result[0].user_id != userId && isAdmin == 0) {\n    return res.status(400).json({message: \"Vous ne pouvez pas supprimer ce commentaire !\"});\n  }\n  try {\n    await queryDbb.commentDeleteCommentId(insertCommentId);\n    return res.status(200).json({message: \"Commentaire supprimé\"});\n  } catch (err) {\n    return res.status(500).json({ error: \"mysql\" });\n  }\n};"]}