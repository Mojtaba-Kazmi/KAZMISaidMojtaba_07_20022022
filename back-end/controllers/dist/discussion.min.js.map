{"version":3,"sources":["discussion.js"],"names":["fs","require","queryDbb","exports","req","res","userId","title","insert","result","regeneratorRuntime","async","_context","prev","next","user","body","createDiscussion","awrap","discussionCreate","sent","abrupt","status","json","t0","error","stop","getAllDiscussion","_context2","discussionSelectAll","getOneDiscussion","id","_context3","params","discussionSelectOne","deleteDiscussion","isAdmin","insertId","deleteId","messageIds","i","queryStringFindFile","filename","_context4","userIsAdmin","selectMessageForDiscussionDelete","length","fileFind","file","split","unlinkSync","concat","discussionDeleteLikeMessage","discussionDeleteMessage","discussionDelete","createMessage","message","discussionId","date","_context5","text_message","Date","protocol","get","messageCreate","getAllMessage","insert2","nb_like","_context6","messageSelectAll","messageNbLike","nbLike","deleteMessage","messageId","insertMessageId","queryStringFile","_context7","messageUserIdBeforeDelete","user_id","commentDeleteMessageId","messageDeleteLike","messageDelete","likeMessage","insertFirst","insertForDelete","resultUser","_context8","message_id","messageUserLike","messageUserDislike","messageLike","commentMessage","comment","_context9","text_comment","messageCommentCreate","getComment","_context10","commentSelectAll","deleteComment","commentId","insertCommentId","_context11","commentSelectUserIdBeforeDelete","commentDeleteCommentId"],"mappings":"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","file":"discussion.min.js","sourcesContent":["const fs = require('fs');\nconst queryDbb = require('../queryBdd');\n\n//Création d'une discussion\nexports.createDiscussion = async (req, res, next) => {\n  const userId = req.user;\n  const title = req.body.title;\n  const insert = [userId, title];\n\n  const result = await queryDbb.discussionCreate(insert);\n  try {\n    return res.status(200).json(result);\n  } catch (err) {\n    return res.status(500).json({ error: \"mysql2\" });\n  }\n};\n\n//récupération de toutes les discussion\nexports.getAllDiscussion = async (req, res, next) => {\n\n  const result = await queryDbb.discussionSelectAll();\n  try {\n    return res.status(200).json(result);\n  } catch (err) {\n    return res.status(500).json({ error: \"mysql2\" });\n  }\n};\n\n//récupération d'une discussion par son id\nexports.getOneDiscussion = async (req, res, next) => {\n  const id = req.params.id;\n  const insert = [id];\n\n  const result = await queryDbb.discussionSelectOne(insert);\n  try {\n    return res.status(200).json(result);\n  } catch (err) {\n    return res.status(500).json({ error: \"mysql2\" });\n  }\n};\n\n//suppression d'une discussion \nexports.deleteDiscussion = async (req, res, next) => {\n\n  const id = req.params.id;\n  const userId = req.user;\n  const isAdmin = req.userIsAdmin;\n  const title = req.body.title;\n  const insertId = [id];\n  const deleteId = [id,userId];\n  \n\n  if (isAdmin == 1) {\n    \n    //je récupère tous les id des messages de la discussion\n    const messageIds = await queryDbb.selectMessageForDiscussionDelete(insertId);\n\n    for (let i = 0; i < messageIds.length; i++) {\n \n      const insert = [messageIds[i].id];\n     \n      let queryStringFindFile = await queryDbb.fileFind(insert);\n\n      if (queryStringFindFile[0].file !== null) {\n        const filename = queryStringFindFile[0].file.split('/images/')[1];\n        fs.unlinkSync(`./images/${filename}`);\n      }\n    \n      try {\n\n        await queryDbb.commentDeleteMessageId(insert);\n        await queryDbb.discussionDeleteLikeMessage(insert);\n        await queryDbb.discussionDeleteMessage(insertId);\n        await queryDbb.discussionDelete(deleteId);\n        \n      } catch ( err ) {\n        return res.status(500).json({ error: \"mysql2\" });\n      }\n    }\n    \n    const dltEmptyDiscussion = await queryDbb.discussionDelete(deleteId);\n    return res.status(200).json(\"Discussion supprimée\");\n\n  } else {\n    //Si l'utilisateur n'est pas admin\n    return res.status(400).json({error: \"Vous n'êtes pas autorisé à supprimer cette discussion\"});\n  }\n    \n};\n\n//création d'un message\nexports.createMessage = async (req, res, next) => {\n  const userId = req.user;\n  const message = req.body.text_message;\n  const discussionId = req.body.discussionId;\n  const date = new Date();\n  \n  let file = null\n\n  if (req.file) {\n      file = `${req.protocol}://${req.get('host')}/images/${req.file.filename}`\n  }\n\n  const insert = [userId, discussionId, message, date, file];\n\n  const result = await queryDbb.messageCreate(insert);\n  try {\n    return res.status(200).json(result);\n  } catch (err) {\n    return res.status(500).json({ error: \"mysql2\" });\n  }\n};\n\n//récupération de tous les messages\nexports.getAllMessage = async (req, res, next) => {\n  const discussionId = req.params.id;\n  const insert = [discussionId];\n\n  const result = await queryDbb.messageSelectAll(insert);\n  \n    for (let i=0; i < result.length; i++) {\n      let insert2 = [result[i].id];\n      const nb_like = await queryDbb.messageNbLike(insert2);\n\n      try {\n        result[i].nbLike = nb_like[0].nb_like;\n      } catch (err) {\n        return res.status(500).json({ error: error });\n      }\n    } \n    return res.status(200).json(result);\n    \n  \n};\n\n//suppression d'un message \nexports.deleteMessage = async (req, res, next) => {\n  const userId = req.user;\n  const messageId = req.body.id;\n  const isAdmin = req.userIsAdmin;\n  const insertMessageId = [messageId];\n\n  //1 On vérifie que l'utilisateur correspond à l'utilisateur qui a posté le message ou qu'il est admin\n  const result = await queryDbb.messageUserIdBeforeDelete(insertMessageId);\n  \n  \n  try {\n    //Si l'utilisateur n'est pas celui qui a posté le message, on renvoie une erreur pour lui dire qu'il ne peut pas supprimer le message\n    if (result[0].user_id != userId && isAdmin == 0) {\n      return res.status(400).json({message: \"Vous ne pouvez pas supprimer ce message !\"});\n    }\n\n    await queryDbb.commentDeleteMessageId(insertMessageId);\n    await queryDbb.messageDeleteLike(insertMessageId);\n\n    const queryStringFile = await queryDbb.fileFind(insertMessageId);\n    if (queryStringFile[0].file !== null) {\n      const filename = queryStringFile[0].file.split('/images/')[1];\n      fs.unlinkSync(`./images/${filename}`);              \n    }\n    \n    await queryDbb.messageDelete(insertMessageId);\n\n    return res.status(200).json({\"message\": \"Message supprimé\"});\n  } catch (err) {\n    return res.status(500).json({ error: \"mysql2\" });\n  }\n    \n};\n\n//Insertion d'un like\nexports.likeMessage = async (req, res, next) => {\n  const userId = req.user\n  const messageId = req.body.message_id;\n  const date = new Date();\n  const insertFirst = [userId, messageId, date];\n  const insertMessageId = [userId, messageId];\n  const insertForDelete = [userId, messageId];\n\n\n  const resultUser = await queryDbb.messageUserLike(insertMessageId);\n \n  //on va vérifier si l'utilisateur a déjà aimé le message\n  try {\n      //Si l'utilisateur a déjà aimé le like, on le supprime de la base\n      if (resultUser.length > 0) {\n        await queryDbb.messageUserDislike(insertForDelete);\n        return res.status(200).json({message: \"Like supprimé de la base\"});\n      }\n\n      else {\n        //si non on l'ajoute à la base\n        const result = await queryDbb.messageLike(insertFirst);\n        return res.status(200).json(result);\n      }\n  } catch ( err ) {\n    return res.status(500).json({ error: \"mysql2\" });\n  }\n}\n\n\n//création d'un commentaire\nexports.commentMessage = async (req, res, next) => {\n  const userId = req.user\n  const messageId = req.body.message_id;\n  const comment = req.body.text_comment;\n  const date = new Date();\n  const insert = [userId, messageId, comment, date]\n\n  const result = await queryDbb.messageCommentCreate(insert);\n  try {\n    return res.status(200).json(result);\n  } catch (err) {\n    return res.status(500).json({ error: \"mysql2\" });\n  }\n};\n\n//récupérations des commentaires\nexports.getComment = async (req, res, next) => {\n  const userId = req.user\n  const messageId = req.params.id;\n  const insert = [messageId];\n\n  const result = await queryDbb.commentSelectAll(insert);\n  try {\n    return res.status(200).json(result);\n  } catch (err) {\n    return res.status(500).json({ error: \"mysql2\" });\n  }\n};\n\n//suppression d'un commentaire \nexports.deleteComment = async (req, res, next) => {\n  const userId = req.user\n  const commentId = req.body.id;\n  const isAdmin = req.userIsAdmin;\n  const insertCommentId = [commentId];\n  \n  const result = await queryDbb.commentSelectUserIdBeforeDelete(insertCommentId);\n  \n  // On vérifie que l'utilisateur est celui qui a posté le commentaire ou qu'il est admin\n  if (result[0].user_id != userId && isAdmin == 0) {\n    return res.status(400).json({message: \"Vous ne pouvez pas supprimer ce commentaire !\"});\n  }\n  try {\n    await queryDbb.commentDeleteCommentId(insertCommentId);\n    return res.status(200).json({message: \"Commentaire supprimé\"});\n  } catch (err) {\n    return res.status(500).json({ error: \"mysql2\" });\n  }\n};"]}