{"version":3,"sources":["auth.js"],"names":["jwt","require","queryDbb","module","exports","req","res","next","headers","_headers$authorizatio","_headers$authorizatio2","scheme","token","jwtToken","userId","userIsAdmin","insert","result","regeneratorRuntime","async","_context","prev","authorization","abrupt","status","json","message","split","_slicedToArray","toLowerCase","verify","isAdmin","awrap","selectIdFromUser","sent","error","t0","user","t1","stop"],"mappings":"mnBAAA,IAAMA,IAAMC,QAAQ,gBACdC,SAAWD,QAAQ,eAIzBE,OAAOC,QAAU,SAAOC,EAAKC,EAAKC,GAAjB,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAb,MAAA,KAAA,EAAA,GAAAa,EAAAC,KAAA,GAGDb,EAAYH,EAAZG,UACSA,EAAQc,cAJhB,CAAAF,EAAAb,KAAA,EAAA,MAAA,OAAAa,EAAAG,OAAA,SALEjB,EAACkB,OAAA,KAApBC,KAAA,CAWYC,QAAS,kCANJ,KAAA,EAAA,GAAAjB,EAAAD,EAAAc,cAAAK,MAAA,KAAAjB,EAAAkB,eAAAnB,EAAA,GAAAE,EAAAD,EAAA,GAAAE,EAAAF,EAAA,GAAAC,GAAA,WAAAA,EAAAkB,eAAAjB,EAAA,CAAAQ,EAAAb,KAAA,EAAA,MAAA,OAAAa,EAAAG,OAAA,SAAAjB,EAAAkB,OAAA,KAAAC,KAAA,CAAAC,QAAA,kDAAA,KAAA,EAAA,OAoBHb,EAAWb,IAAI8B,OAAOlB,EAAO,uBApB1BE,EAAAD,EAAAC,OAAAC,EAAAF,EAAAkB,QAyBHf,EAAS,CAACF,GAzBPM,EAAAb,KAAA,GAAAW,mBAAAc,MAAA9B,SAAA+B,iBAKWjB,IALX,KAAA,GAAA,GAAAC,EAAAG,EAAAc,KAAAd,EAAAC,KAAA,GA6BFJ,EAAO,GA7BL,CAAAG,EAAAb,KAAA,GAAA,MAAA,OAAAa,EAAAG,OAAA,SAAAjB,EAAAkB,OAAA,KAAAC,KAAA,CAAAU,MAAA,iCAAA,KAAA,GAAAf,EAAAb,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAa,EAAAC,KAAA,GAAAD,EAAAgB,GAAAhB,EAAA,MAAA,IAAAA,EAAAG,OAAA,SAiCAjB,EAAIkB,OAAO,KAAKC,KAAK,CAACU,MAAO,YAjC7B,KAAA,GAAA,OAsCT9B,EAAIgC,KAAOvB,EAtCFT,EAAAU,YAAAA,EAAAK,EAAAG,OAAA,SA0CFhB,KA1CE,KAAA,GAAA,OAAAa,EAAAC,KAAA,GAAAD,EAAAkB,GAAAlB,EAAA,MAAA,GAAAA,EAAAG,OAAA,SAmBTjB,EAAAkB,OAAA,KAAAC,KAAA,CACMZ,QApBG,mBAAA,KAAA,GAAA,IAAA,MAAA,OAAAO,EAAAmB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,IAAA,CAAA,GAAA","file":"auth.min.js","sourcesContent":["const jwt = require('jsonwebtoken');\nconst queryDbb = require('../queryBdd');\n\n\n//middleware qui vérifie le token de l'utilisateur\nmodule.exports = async (req, res, next) => {\n   try {\n        // On vérifie que le header Authorization est présent dans la requete\n        const { headers } = req;\n        if (!headers || !headers.authorization) {\n          return res.status(401).json({\n            message: 'Missing Authorization header'\n          });\n        }\n\n        //on vérifie que le header Authorization contient bien le token\n        const [scheme, token] = headers.authorization.split(' ');\n\n        if (!scheme || scheme.toLowerCase() !== 'bearer' || !token) {\n          return res.status(401).json({\n            message: 'Header format is Authorization: Bearer token'\n          });\n        }\n\n        //on vérifie et décode le token à l'aide du secret \n        const jwtToken = jwt.verify(token, 'RANDOM_TOKEN_SECRET');\n        //on vérifie que l'utilisateur existe dans la base de donnée\n        const userId = jwtToken.userId;\n        const userIsAdmin = jwtToken.isAdmin;\n\n        const insert = [userId]\n        const result = await queryDbb.selectIdFromUser(insert);\n        \n        try {\n          if (!result[0]) {\n            return res.status(400).json({error: 'l\\'utilisateur n\\'existe pas.'});\n          } \n        } catch (err) {\n          return res.status(500).json({error: \"mysql2\"});\n        }\n        \n\n        //On passe l'utilisateur dans notre requete afin que celui-ci soit disponible pour les prochains middlewares\n        req.user = userId;\n        req.userIsAdmin = userIsAdmin\n\n        //On appelle le prochain middleware\n        return next();\n    } catch (err) {    \n        return res.status(401).json({\n          message: 'Invalid token'\n        });    \n    }\n};\n\n\n\n"]}